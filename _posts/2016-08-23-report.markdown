---
layout: post
title:  "GSOC 2016 : Final Report"
date:   2016-08-23 00:00:35 +0530
categories: gsoc
---

Finally, GSOC 2016 has come to an end. This last blog post will aim to sum up the work done in these 
past few months and how the project can proceed to hit more milestones. Below are some links to my work :-

[Working Repository][repo]
[List of Commits][commits]
[Example iRuby Notebooks][note]


Firstly, I must admit that I was unable to meet all the goals of my proposal. In retrospect, perhaps it was a bit too ambitious for my skill level at the time, and I undoubtedly spent a lot of time learning, about Ruby-C extensions, the SPICE Toolkit, and good Ruby code and API.

General software requirements such as a shippable gem with an install script that downloads the correct binary dependencies and a dataset fetcher were among the targets in my proposal that I could not meet. If you'd like to read the full proposal, you can have a look at it [here][prop].

With that said, I am happy with what I did complete, and along with most of the functions in the proposal list being ported successfuly, I have added 3 Ruby classes to provide a better abstracted experience while using the Ephemerides subsystem of SPICE. Given the vastness of SPICE itself, this seems like meagre coverage, but it is a stepping stone that I (and I hope others) would build upon.

Please follow the blog links below to read the posts concerning the Ruby classes, the posts basically demonstrate the simple API that can be used for various tasks involving ephemerides. It would help if you followed the order of the links below as they build on top of each other.

[KernelPool][pool] :- A Singleton class to handle the loading and unloading of SPICE Data (Kernels)

[Time][time] :- A class that references ephemeris time and has flexible construction functions

[Body][body] :- A class that represents a body in space whose motion can be observed with respect to another body.

I spent majority of the post mid-term period on the latter two classes, while most of the time before was spent on writing C extensions to port the SPICE API to Ruby. (and learning good  `spec` manners, something that was not that quick to grow on me but towards the end got ingrained into me)

I ran into a lot of bugs, learnt more about compiler flags and other building options, and it gave me surprisingly good exposure to low level language trivia for a high level Ruby project. As of now, I'm sort of in love with the way Ruby has been built and works.









[spicerub]: https://github.com/gau27/spice_rub
[readme]: https://github.com/gau27/spice_rub/blob/master/README.rdoc
[toolkit]: https://naif.jpl.nasa.gov/naif/toolkit_C.html
[time_paradox]: https://en.wikipedia.org/wiki/Year_2038_problem
[unitim]: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/unitim_c.html
[str2et]: https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/str2et_c.html
[prop]: https://summerofcode.withgoogle.com/serve/5210336198131712/
[body]: http://gauravtamba.me/gsoc/2016/08/21/body-tutorial.html
[pool]: http://gauravtamba.me/gsoc/2016/06/11/week1_soc.html
[time]: http://gauravtamba.me/gsoc/2016/08/21/time-tutorial.html

[repo]: http://github.com/gau27/spice_rub
[commits]: https://github.com/gau27/spice_rub/commits/master
[note]: https://github.com/gau27/spice_rub/tree/master/examples